#Region "Unit description" '"Program description"

'*********
'
'  Pass %LT_Debug to the Log function to control if message is displayed/written or not according to isDebug value
'
'*********

'[todo] delete log file if over maxLogCount
'[todo] archive log file compression

#EndRegion


#Region "Uses"

if (Uses "Console") >= 0 then Console_ShowWindow(%CONSOLE_SW_HIDE) ' Do not show console if it was hidden before
uses "File"

#EndRegion


#Region "Includes"

#EndRegion

#Region "Equates"

' Log equates

%LT_Debug = 1 as Long 'Display only if isDebug = %TRUE
%LT_Time = 2 as Long ' Prepend DateTime$
%LT_ToConsole = 4 as Long
%LT_ToConsoleTitle = 8 as Long
%LT_ToMsgBox = 16 as Long
%LT_ToLogFile= 32 as long
%LT_ToStatusBar= 64 as long
'%LT_ToRichedit = 128 as Long ?

$FILE_ROTATION_START_MESSAGE = "Log file rotation * START *."
$FILE_ROTATION_DONE_MESSAGE = "Log file rotation * DONE *."
$FILE_BACKUP_MESSAGE = "This Log file backup..."
$FILE_BACKUP_SUCCESS_MESSAGE = "Successful backup of previous Log file as {1}"
$FILE_ROTATION_TAG = "[LOG UNIT]"
$FILE_CREATION_MESSAGE = "Creation of Log file {1}"

begin const
  %TAG_PANIC ' 1
  %TAG_ALERT ' 2
  %TAG_CRIT
  %TAG_ERR
  %TAG_WARN
  %TAG_NOTICE
  %TAG_INFO
  %TAG_DEBUG ' 8
  %TAG_NOTAG ' 9
End const

#EndRegion

Type tLogThis

  isDebug as Boolean
  logFile as String
  logFileMaxSize as Long
  prependTag as Boolean
  
  ColorTime as Long
  ColorText as Long
  ColorDebugText as Long
  ColorTag as Long
  ColorBackground as Long
  
  titleSeparator as String
  titleSeparatorFile AS String
  timeSeparator as String
  timeSeparatorFile as String
  tagSeparator as String
  tagSeparatorFile as String
  endLineFile as String
  TagDebug as String
  TagInfo as String
  TagNotice as String
  TagWarn as String
  TagErr as String
  TagCrit as String
  TagAlert as String
  TagPanic as String
  msgboxStyle as number
  verbose as Boolean ' If %TRUE, will display debug messages even if Not isDebug
  minSeverityHighlight as Byte

  statusbarhWnd as Number
  statusbarctrlID as number
  statusbarlPart as Number

  Function _Create()
    
    'Default settings
    me.isDebug = %FALSE
    me.verbose = %FALSE
    me.prependTag = %TRUE
    me.ColorTime = %CONSOLE_FOREGROUND_BLUE + %Console_FOREGROUND_GREEN + %CONSOLE_FOREGROUND_INTENSITY ' bright cyan
    me.ColorText = %CONSOLE_FOREGROUND_RED OR %CONSOLE_FOREGROUND_BLUE OR %CONSOLE_FOREGROUND_GREEN ' white
    me.ColorDebugText = %CONSOLE_FOREGROUND_RED OR %CONSOLE_FOREGROUND_GREEN ' orange
    me.ColorTag = %CONSOLE_FOREGROUND_RED OR %CONSOLE_FOREGROUND_GREEN ' orange
    me.ColorBackground = Console_BackgroundRGB(0, 0, 0, 0 ) ' black background
    me.titleSeparator = " : "
    me.titleSeparatorFile = " ; "
    me.timeSeparator = $SPC
    me.timeSeparatorFile = " ; "
    me.tagSeparator = $SPC
    me.tagSeparatorFile = " ; "
    me.endLineFile = $CRLF
    me.TagDebug = "[DEBUGGING]"
    me.TagInfo = "[INFORMATIONAL]"
    me.TagNotice = "[NOTICE]"
    me.TagWarn = "[WARNING]"
    me.TagErr = "[ERROR]"
    me.TagCrit = "[CRITICAL]"
    me.TagAlert = "[ALERT]"
    me.TagPanic = "[EMERGENCY]"
    me.minSeverityHighlight = %TAG_ERR
    me.msgboxStyle = %MB_OK + %MB_TOPMOST ' %MB_ICONINFORMATION

  end function
  
  Function SetLogFile (logFileFullPath as String, logFileMaxSize as Long)
  
    me.logFile = logFileFullPath
    me.logFileMaxSize = logFileMaxSize
    
  end function
  
  function SetStatusbar(statusbarhWnd as Number, statusbarctrlID as number, statusbarlPart as Number)
  
    me.statusbarhWnd = statusbarhWnd
    me.statusbarctrlID = statusbarctrlID
    me.statusbarlPart = statusbarlPart
  
  end function

  function write(logWhere as long = 0, logWhat as String, optional logWhatTitle as string, severityTag as Byte) as Boolean
    
    Local allOK as Boolean = %TRUE
    Local sTag as String
    Local sTagF as String
    Local sDT as String
    Local sDTF as String
    Local successFile as Number
    Local logWhatTitleFile = logWhatTitle
    
    '[t] Workaround for Switch$ error ( see https://www.thinbasic.com/community/project.php?issueid=616 ) ...
    local TagDebug = me.TagDebug 
    local TagInfo = me.TagInfo
    local TagNotice = me.TagNotice
    local TagWarn = me.TagWarn
    local TagErr = me.TagErr
    local TagCrit = me.TagCrit
    local TagAlert = me.TagAlert
    local TagPanic = me.TagPanic
    
    Local ColorDebugText = me.ColorDebugText
    Local ColorBackground = me.ColorBackground
    Local ColorText = me.ColorText
    ' ... workaround
    
    '[t] Workaround for PrintL error ( see https://www.thinbasic.com/community/project.php?issueid=617 ) ...
    Local myColor as number
    ' ... workaround
    
    Local logFile = me.logFile
    
    if me.isDebug or not Bit_Get(logWhere,0) then ' Display debug and production messages (all messages) OR Display production messages only (no debug messages)
      
      if Bit_Get(logWhere,1) then ' %LT_Time is SET, adds timestamp
        sDTF = DateTime$
        sDT = sDTF & me.timeSeparator
        sDTF &= me.timeSeparatorFile
      End If
      if severityTag <> %TAG_NOTAG ANd me.prependTag then ' %LT_Debug is SET, signals a debug only message, adds a [DEBUG] tag.
        
        sTagF = Switch$(severityTag = %TAG_DEBUG, me.TagDebug, severityTag = %TAG_INFO, me.TagInfo, severityTag = %TAG_NOTICE, me.TagNotice, severityTag = %TAG_WARN, me.TagWarn, severityTag = %TAG_ERR, me.TagErr, severityTag = %TAG_CRIT, me.TagCrit, severityTag = %TAG_ALERT, me.TagAlert, severityTag = %TAG_PANIC, me.TagPanic)
        'sTagF = Switch$(severityTag = %TAG_DEBUG, TagDebug, severityTag = %TAG_INFO, TagInfo, severityTag = %TAG_NOTICE, TagNotice, severityTag = %TAG_WARN, TagWarn, severityTag = %TAG_ERR, TagErr, severityTag = %TAG_CRIT, TagCrit, severityTag = %TAG_ALERT, TagAlert, severityTag = %TAG_PANIC, TagPanic)
        
        sTag = sTagF & me.tagSeparator
        sTagF &= me.tagSeparatorFile
      end if
      
      if Bit_Get(logWhere,3) then ' %LT_ToConsoleTitle is SET
        Console_SetTitle(sDT & sTag & LogWhatTitle & LogWhat)
      end if
      
      if Bit_Get(logWhere,4) then ' %LT_ToMsgBox is SET
        MsgBoxW(0,logWhat, me.msgboxStyle + Switch(severityTag <= %TAG_ERR, %MB_ICONERROR, severityTag = %TAG_WARN, %MB_ICONWARNING, %TRUE, %MB_ICONINFORMATION), sDT & sTag & logWhatTitle)
      end if
      
      if len(logWhatTitle) > 0 then logWhatTitle &= me.titleSeparator
      
      if Bit_Get(logWhere,2) then ' %LT_ToConsole is SET
        Print sDT IN IIf(severityTag <= me.minSeverityHighlight, me.ColorTime OR me.ColorBackground Or %CONSOLE_FOREGROUND_INTENSITY, me.ColorTime OR me.ColorBackground)
        Print sTag in IIf(severityTag <= me.minSeverityHighlight, me.ColorTag OR me.ColorBackground Or %CONSOLE_FOREGROUND_INTENSITY, me.ColorTag OR me.ColorBackground) 
        
'[t] Workaround for PrintL error ( see https://www.thinbasic.com/community/project.php?issueid=617 ) ...
        
        'PrintL((LogWhatTitle & LogWhat) IN (Switch(Bit_Get(logWhere,0), me.ColorDebugText Or me.ColorBackground, severityTag <= me.minSeverityHighlight and Bit_Get(logWhere,0), me.ColorDebugText Or me.ColorBackground Or %CONSOLE_FOREGROUND_INTENSITY, severityTag <= me.minSeverityHighlight, me.ColorText Or me.ColorBackground Or %CONSOLE_FOREGROUND_INTENSITY, %TRUE, me.ColorText Or me.ColorBackground)))
        'PrintL(LogWhatTitle & LogWhat IN %CONSOLE_FOREGROUND_BLUE)'(Switch(Bit_Get(logWhere,0), me.ColorDebugText Or me.ColorBackground, severityTag <= me.minSeverityHighlight and Bit_Get(logWhere,0), me.ColorDebugText Or me.ColorBackground Or %CONSOLE_FOREGROUND_INTENSITY, severityTag <= me.minSeverityHighlight, me.ColorText Or me.ColorBackground Or %CONSOLE_FOREGROUND_INTENSITY, %TRUE, me.ColorText Or me.ColorBackground)))
       
        myColor = Switch(Bit_Get(logWhere,0), me.ColorDebugText Or me.ColorBackground, severityTag <= me.minSeverityHighlight and Bit_Get(logWhere,0), me.ColorDebugText Or me.ColorBackground Or %CONSOLE_FOREGROUND_INTENSITY, severityTag <= me.minSeverityHighlight, me.ColorText Or me.ColorBackground Or %CONSOLE_FOREGROUND_INTENSITY, %TRUE, me.ColorText Or me.ColorBackground)
        PrintL(LogWhatTitle & LogWhat IN myColor)
        
' ... workaround
    
      end if
      
      if Bit_Get(logWhere,5) then ' %LT_ToLogFile is SET
        if me.RotateLog = %FALSE then allOK = allOK and %FALSE
        local sb as string
        sb = sDTF & sTagF & logWhatTitleFile & me.titleSeparatorFile & logWhat & me.endLineFile
        successFile = FILE_Append(me.logFile,sb)
        if successFile <> 0 Then allOK = allOK and %FALSE
        Reset successFile
      End If
      
      if Bit_Get(logWhere,6) then ' %LT_ToStatusBar is SET
        if me.statusbarhWnd <> 0 and me.statusbarctrlID <> 0 and me.statusbarlPart <> 0 Then ' Function SetStatusbar was previously called
          StatusBar_SetText(me.statusbarhWnd, me.statusbarctrlID, logWhatTitle & me.titleSeparator & logWhat, me.statusbarlPart)
        Else
          allOK = allOK and %FALSE
        end if
      End If
    
    end If
    
    if allOK then
      Return %TRUE
    Else
      if isDebug or (not isDebug and verbose) then MsgBoxw(Null,"Error in function :" & Function_Name)
      Return %FALSE
    end if
      
  end function

  Function RotateLog() as Boolean
    
    Local allOK as Boolean = %TRUE
    Local sLog, sLog2 as String
    Local successFile as Number
    Local newFilename as String
    '[t] <this part needs to be tested>
    
    Local logFileE as String
    Local logFile = me.logFile
    
    if me.logFileMaxSize >0 and len(me.logFile) > 3 then 'Function SetLogFile was previously called
      
      logFileE = FILE_Exists(me.logFile)
      if not logFileE Then ' Create new log file
        sLog = DateTime$ & me.timeSeparatorFile & $FILE_ROTATION_TAG & me.tagSeparatorFile & StrFormat$($FILE_CREATION_MESSAGE, me.logFile) & me.endLineFile
        successFile = FILE_Save(me.logFile, sLog)
        if successFile <> 0 Then allOK = allOK and %FALSE
        reset successFile
      end if
      
      sLog = DateTime$ & me.timeSeparatorFile & $FILE_ROTATION_TAG & me.tagSeparatorFile & $FILE_ROTATION_START_MESSAGE & me.endLineFile
      sLog2 = me.timeSeparatorFile & $FILE_ROTATION_TAG & me.tagSeparatorFile & $FILE_BACKUP_MESSAGE & me.endLineFile

      if allOK and FILE_Size(me.logFile) + len(sLog) + 19 + Len(sLog2) > me.logFileMaxSize Then ' Size will be beyond me.logFileMaxSize
        successFile = FILE_Append(me.logFile, sLog)
        if successFile <> 0 Then allOK = allOK and %FALSE
        reset successFile
        if allOK Then
          successFile = FILE_Append(me.logFile, DateTime$ & sLog2)
          if successFile <> 0 Then allOK = allOK and %FALSE
          reset successFile
          if allOK Then
            newFilename = FILE_PathSplit(me.logFile, %PATH_ROOTPATH) & Date$ (3) & $SPC & time$(2) & $SPC & FILE_PathSplit(me.logFile, %PATH_FILEEXT)
            successFile = FILE_Rename(me.logFile, newFilename)
            if successFile <> 0 Then allOK = allOK and %FALSE
            reset successFile
          End If
        End If
        if allOK Then
          sLog = DateTime$ & me.timeSeparatorFile & $FILE_ROTATION_TAG & me.tagSeparatorFile & StrFormat$($FILE_BACKUP_SUCCESS_MESSAGE, newFilename) & me.endLineFile
          successFile = FILE_Append(me.logFile, sLog)
          if successFile <> 0 Then allOK = allOK and %FALSE
          reset successFile
        End If
        if allOK Then
          sLog = DateTime$ & me.timeSeparatorFile & $FILE_ROTATION_TAG & me.tagSeparatorFile & StrFormat$($FILE_ROTATION_DONE_MESSAGE, newFilename) & me.endLineFile
          successFile = FILE_Append(me.logFile, sLog)
          if successFile <> 0 Then allOK = allOK and %FALSE
          reset successFile
        End If
      End If
    Else
      allOK = allOK and %FALSE
    end if
    
    if allOK then
      Return %TRUE
    Else
      if isDebug or (not isDebug and verbose) then MsgBoxw(Null,"Error in function :" & Function_Name)
      Return %FALSE
    End If
  
  end function
 
end type
